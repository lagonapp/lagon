generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  verificationCode String?

  currentOrganizationId String?
  organizations         Organization[]
  tokens                Token[]
}

model Organization {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  functions Function[]
}

model Function {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  domains String[]
  memory  Int
  timeout Int
  cron    String?
  env     String[]

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  deployments Deployment[]
}

model Deployment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isCurrent Boolean

  function   Function @relation(fields: [functionId], references: [id], onDelete: Cascade)
  functionId String
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
