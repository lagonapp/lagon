generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String               @id @default(cuid())
  name                  String?
  email                 String?              @unique
  emailVerified         DateTime?
  image                 String?
  verificationCode      String?
  currentOrganizationId String?
  accounts              Account[]
  sessions              Session[]
  organizationsOwner    Organization[]
  tokens                Token[]
  organizationsMember   OrganizationMember[]
}

model Organization {
  id          String               @id @default(cuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  name        String               @db.VarChar(64)
  description String?              @db.VarChar(256)
  ownerId     String
  owner       User                 @relation(fields: [ownerId], references: [id])
  members     OrganizationMember[]
  functions   Function[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@index([ownerId])
}

model OrganizationMember {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
}

model Function {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String        @unique @db.VarChar(64)
  memory         Int
  tickTimeout    Int           @default(500)
  cron           String?
  organizationId String
  cronRegion     String        @default("paris-eu-west")
  totalTimeout   Int           @default(5000)
  organization   Organization  @relation(fields: [organizationId], references: [id])
  domains        Domain[]
  env            EnvVariable[]
  deployments    Deployment[]

  @@index([organizationId])
}

model Domain {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  domain     String   @unique
  functionId String
  function   Function @relation(fields: [functionId], references: [id])

  @@index([functionId])
}

model EnvVariable {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  key        String   @db.VarChar(64)
  value      String   @db.VarChar(5120)
  functionId String
  function   Function @relation(fields: [functionId], references: [id])

  @@index([functionId])
}

model Deployment {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  functionId   String
  triggerer    String   @default("Lagon")
  commit       String?
  isProduction Boolean  @default(false)
  function     Function @relation(fields: [functionId], references: [id])
  assets       Json     @default("[]")

  @@index([functionId])
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model AuthorizedEmail {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
}
