generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String?        @unique
  emailVerified         DateTime?
  image                 String?
  verificationCode      String?
  currentOrganizationId String?
  accounts              Account[]
  sessions              Session[]
  organizations         Organization[]
  tokens                Token[]
}

model Organization {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  description String?
  ownerId     String
  owner       User       @relation(fields: [ownerId], references: [id])
  functions   Function[]
}

model Function {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String        @unique
  memory         Int
  timeout        Int
  cron           String?
  organizationId String
  cronRegion     String        @default("EU-WEST-3")
  startupTimeout Int           @default(200)
  organization   Organization  @relation(fields: [organizationId], references: [id])
  domains        Domain[]
  env            EnvVariable[]
  deployments    Deployment[]
}

model Domain {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  domain     String   @unique
  functionId String
  function   Function @relation(fields: [functionId], references: [id])
}

model EnvVariable {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  key        String
  value      String
  functionId String
  function   Function @relation(fields: [functionId], references: [id])
}

model Deployment {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  functionId   String
  triggerer    String   @default("Lagon")
  commit       String?
  isProduction Boolean  @default(false)
  function     Function @relation(fields: [functionId], references: [id])
  assets       Asset[]
}

model Asset {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String
  deploymentId String
  deployment   Deployment @relation(fields: [deploymentId], references: [id])
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
