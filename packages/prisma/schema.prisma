generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  verificationCode String?

  currentOrganizationId String?
  organizations         Organization[]
  tokens                Token[]
}

model Organization {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  functions Function[]
}

model Function {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String        @unique
  domains Domain[]
  memory  Int
  timeout Int
  cron    String?
  env     EnvVariable[]

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  deployments Deployment[]
  stats Stat[]
  logs Log[]
}

model Domain {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  domain String @unique

  function   Function @relation(fields: [functionId], references: [id])
  functionId String
}

model EnvVariable {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  key   String
  value String

  function   Function @relation(fields: [functionId], references: [id])
  functionId String
}

model Deployment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isCurrent Boolean
  assets    Asset[]

  function   Function @relation(fields: [functionId], references: [id])
  functionId String

  triggerer String  @default("Lagon")
  commit    String?

  stats Stat[]
  logs Log[]
}

model Asset {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  // TODO: sha

  deployment   Deployment @relation(fields: [deploymentId], references: [id])
  deploymentId String
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Stat {
  id     String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  function Function @relation(fields: [functionId], references: [id])
  functionId String

  deployment Deployment @relation(fields: [deploymentId], references: [id])
  deploymentId String

  cpuTime Int
  sendBytes Int
  receivedBytes Int
  requests Int
}

enum LogLevel {
  LOG
  ERROR
  INFO
  WARN
  DEBUG
}

model Log {
  id     String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  function Function @relation(fields: [functionId], references: [id])
  functionId String

  deployment Deployment @relation(fields: [deploymentId], references: [id])
  deploymentId String

  level LogLevel
  message String
}
