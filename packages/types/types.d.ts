/**
 * DO NOT EDIT
 * This file has been autogenerated by ./generate.mjs
 */

/* eslint-disable */

interface RequestInit {
    method?: string;
    headers?: Record<string, string | string[] | undefined>;
    body?: string;
}
declare class Request {
    method: string;
    headers: Record<string, string | string[] | undefined>;
    body?: string;
    url: string;
    constructor(input: string, options?: RequestInit);
    text(): Promise<string>;
    json<T>(): Promise<T>;
    formData(): Promise<Record<string, string>>;
}


interface ResponseInit {
    status?: number;
    statusText?: string;
    headers?: Record<string, string | string[] | undefined>;
    url?: string;
}
declare class Response {
    body: string;
    headers: Record<string, string | string[] | undefined>;
    ok: boolean;
    status: number;
    statusText: string;
    url: string;
    constructor(body: string, options?: ResponseInit);
    text(): Promise<string>;
    json<T>(): Promise<T>;
    formData(): Promise<Record<string, string>>;
}


declare class URLSearchParams {
    private params;
    constructor(init?: string);
    append(name: string, value: string): void;
    delete(name: string): void;
    entries(): IterableIterator<[string, string]>;
    forEach(callback: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any): void;
    get(name: string): string | undefined;
    getAll(name: string): string[] | undefined;
    has(name: string): boolean;
    keys(): IterableIterator<string>;
    set(name: string, value: string): void;
    sort(): void;
    toString(): string;
    values(): IterableIterator<string>;
}
declare class URL {
    hash: string;
    host: string;
    hostname: string;
    href: string;
    origin: string;
    pathname: string;
    port: string;
    protocol: string;
    search: string;
    searchParams: URLSearchParams | null;
    constructor(url: string, base?: string);
    toString(): string;
}





declare function fetch(resource: string, init: RequestInit): Promise<Response>;


declare const parseMultipart: (headers: Record<string, string | string[] | undefined>, body?: string | undefined) => Record<string, string>;


